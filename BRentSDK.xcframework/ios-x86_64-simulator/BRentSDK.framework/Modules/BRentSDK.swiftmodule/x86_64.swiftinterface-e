// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BRentSDK
import AdSupport
@_exported import BRentSDK
import CommonCrypto
import CoreTelephony
import Foundation
import Swift
import UIKit
import WebKit
extension BRentSDK : UserNotifications.UNUserNotificationCenterDelegate {
  @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, openSettingsFor notification: UserNotifications.UNNotification?)
}
@objc @_hasMissingDesignatedInitializers public class SplashScreen : UIKit.UIView {
  public static func sharedWithOptions(tintColor: UIKit.UIColor, hideNotification: Foundation.Notification.Name? = nil) -> BRentSDK.SplashScreen
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension SplashScreen {
  @objc override dynamic public func didMoveToSuperview()
}
extension Bundle {
  public var icon: UIKit.UIImage {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BRentSDK : ObjectiveC.NSObject {
  @objc deinit
}
public protocol BRentSDKDelegate : UIKit.UIApplicationDelegate {
  func pause()
  func event(eventName: Swift.String, parameters: [Swift.String : Any]?)
  func issue(isError: Swift.Bool, message: Swift.String, extra: [Swift.String : Any]?)
}
extension BRentSDK {
  public static var orientationMask: UIKit.UIInterfaceOrientationMask {
    get
  }
  public static var isReady: Swift.Bool {
    get
  }
  public static var launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? {
    get
  }
  public static var keys: [Swift.String : Swift.String] {
    get
  }
  public static func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
}
extension BRentSDK {
  public static func setAfid(afid: Swift.String?)
  public static func setPushToken(_ pushToken: Swift.String)
}
extension BRentSDK {
  public static func handleFBLink(_ url: Foundation.URL?, _ error: Swift.Error?)
  public static func handleAFLink(_ conversionInfo: [Swift.AnyHashable : Any])
}
extension NSNotification.Name {
  public static let hideSplash: Foundation.Notification.Name
}
